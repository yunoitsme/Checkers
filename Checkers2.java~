//v1.0.2
/*
 * add remove path
 */
public class Checkers2
{
  Board b;
  boolean RedTurn = true;
  Location[] toBeRemoved = new Location[10]; //orange
  Location[] path = new Location[10];//gray
  Location start = new Location(0,0);// yellow
  Location piece = null;// green
  
  public Checkers2()
  {
     b = new Board();
    //fill with red
    int z = 0;
    for(int row = 0; row < 3; row++)
    {
      for(int col = z; col < 8; col+= 2)
      {
        b.Put(row, col, 2);
      }
      
      if(z == 0)
      {
        z++;
      }else
      {
        z--;
      }
    }//end adding red
    //fill with black
    for(int row = 5; row < 8; row++)
    {
      for(int col = z; col < 8; col+= 2)
      {
        b.Put(row, col, 1);
      }
      
      if(z == 0)
      {
        z++;
      }else
      {
        z--;
      }
    }//end adding black
  }
  
  public Checkers2(Board board)
  {
    b = board;
    //fill with red
    int z = 0;
    for(int row = 0; row < 3; row++)
    {
      for(int col = z; col < 8; col+= 2)
      {
        b.Put(row, col, 2);
      }
      
      if(z == 0)
      {
        z++;
      }else
      {
        z--;
      }
    }//end adding red
    //fill with black
    for(int row = 5; row < 8; row++)
    {
      for(int col = z; col < 8; col+= 2)
      {
        b.Put(row, col, 1);
      }
      
      if(z == 0)
      {
        z++;
      }else
      {
        z--;
      }
    }//end adding black
  }
  
  public boolean IsValidMove(Location newloc)//ad kings later
  {
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 0)
    {
      return false;
    }
    if(b.GetPiece(newloc.GetRow(), newloc.GetCol()) != 0)
    {
      return false;
    }
    //check jump black
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 1)
    {
      if(piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() + 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() - 1, piece.GetCol() + 1) == 2 || 
         piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() + 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() - 1, piece.GetCol() + 1) == 4)
      {
        //b.Remove(piece.GetRow() - 1, piece.GetCol() + 1);
        return true;
      }
      if(piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() - 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() - 1, piece.GetCol() - 1) == 2 || 
         piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() - 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() - 1, piece.GetCol() - 1) == 4)
      {  
        //b.Remove(piece.GetRow() - 1, piece.GetCol() - 1);
        return true;
      }
    }//end black jump
    //check red jump
    if(b.GetPiece(piece.GetRow(),  piece.GetCol()) == 2)
    {
      if(piece.GetRow() + 2 == newloc.GetRow() && piece.GetCol() + 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() + 1, piece.GetCol() + 1) == 1 || 
         piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() + 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() + 1, piece.GetCol() + 1) == 3)
      {
        //b.Remove(piece.GetRow() + 1, piece.GetCol() + 1);
        return true;
      }
      if(piece.GetRow() + 2 == newloc.GetRow() && piece.GetCol() - 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() + 1, piece.GetCol() - 1) == 1 || 
         piece.GetRow() - 2 == newloc.GetRow() && piece.GetCol() + 2 == newloc.GetCol() && b.GetPiece(piece.GetRow() + 1, piece.GetCol() - 1) == 3)
      {  
        //b.Remove(piece.GetRow() + 1, piece.GetCol() - 1);
        return true;
      }
    }//end red jump
    return false;
  }
  
  public boolean IsBasicMove(Location newloc)
  {
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 0)
    {
      return false;
    }
    if(b.GetPiece(newloc.GetRow(), newloc.GetCol()) != 0)
    {
      return false;
    }
    //check regular for black
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 1)
    {
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {  
        return true;
      }
    }//end regular move black
    //check regular move red
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 2)
    {
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {  
        return true;
      }
    }//end regular move red
    //check black king regular
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 3)
    {
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {  
        return true;
      }
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {
        return true;
      }
    }//end black king regular move
    //check red king regular
    if(b.GetPiece(piece.GetRow(), piece.GetCol()) == 4)
    {
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() - 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {  
        return true;
      }
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() + 1 == newloc.GetCol())
      {
        return true;
      }
      if(piece.GetRow() + 1 == newloc.GetRow() && piece.GetCol() - 1 == newloc.GetCol())
      {
        return true;
      }
    }//end red king regular move
    return false;
  }
  
  public void MakeMove()//will exicute move
  {
    RemovePieces();
    piece = null;
    start = null;
    path = new Location[10];
  }
  
  public void DontMakeMove()//will undo all movement when start position is clicked
  {
    
  }
  
  public void Move(Location newloc)//may need to be rewritten or edited 
  {
    int pieceID;
    pieceID = b.GetPiece(piece.GetRow(), piece.GetCol());
    b.Remove(piece.GetRow(), piece.GetCol());
    toBeRemoved[toBeRemoved.length] = FindJumpedPiece(piece, newloc);
    b.Put(newloc.GetRow(), newloc.GetCol(), pieceID);
    path[path.length] = piece;
    piece = new Location(newloc.GetRow(), newloc.GetCol());
  }
  
  public Location FindJumpedPiece(Location loc, Location newloc)
  {
    Location jPiece = new Location();
    if(newloc.GetRow() > loc.GetRow())
    {
      if(newloc.GetCol() > loc.GetCol())
      {
        jPiece = new Location(newloc.GetRow() - 1, newloc.GetCol() - 1);
      }else
      {
        jPiece = new Location(newloc.GetRow() - 1, newloc.GetCol() + 1);
      }
    }else
    {
      if(newloc.GetCol() > loc.GetCol())
      {
        jPiece = new Location(newloc.GetRow() + 1, newloc.GetCol() - 1);
      }else
      {
        jPiece = new Location(newloc.GetRow() + 1, newloc.GetCol() + 1);
      }
    }
    return jPiece;
  }
  
  public void RemovePieces()
  {
    for(int x = 0; x < toBeRemoved.length - 1; x++)
    {
      b.Remove(toBeRemoved[x].GetRow(), toBeRemoved[x].GetCol());
    }
    toBeRemoved = new Location[10];
  }
  
  public void KingMe()
  {
    //checks to king black
    for(int col = 0; col < 8; col++)
    {
      if(b.GetPiece(0, col) == 1)
      {
        b.Put(0, col, 3);
      }
    }//end king black
    //checks to king red
    for(int col = 0; col < 8; col++)
    {
      if(b.GetPiece(7, col) == 2)
      {
        b.Put(7, col, 4);
      }
    }//end king red
  }
  
  public int GetPiece(Location loc)
  {
    return b.GetPiece(loc.GetRow(), loc.GetCol());
  }
  
  public boolean GameOver()
  {
    if(NoBlack() || NoRed())
    {
      return true;
    }
    return false;
  }
  
  public boolean RedWon()
  {
    if(NoRed())
    {
      return false;
    }
    return true;
  }
  
  public boolean NoRed()
  {
    for(int row = 0; row < 8; row++)
    {
      for(int col = 0; col < 8; col++)
      {
        if(b.GetPiece(row, col) == 2 || b.GetPiece(row, col) == 4)
        {
          return false;
        }
      }
    }
    return true;
  }
  
  public boolean NoBlack()
  {
    for(int row = 0; row < 8; row++)
    {
      for(int col = 0; col < 8; col++)
      {
        if(b.GetPiece(row, col) == 1 || b.GetPiece(row, col) == 3)
        {
          return false;
        }
      }
    }
    return true;
  }
  
  public Location GetStart()
  {
    return start;
  }
  
  public boolean IsStart()
  {
    if(start == null)
    {
      return false;
    }
    return true;
  }
  
  /*public void Click(Location newloc)
  {
    if(start == null)
    {
      if(b.GetPiece(newloc.GetRow(), newloc.GetCol()) != 0)
      {
        if(RedTurn)
        {
          if(b.GetPiece(newloc.GetRow(), newloc.GetCol()) == 2 || b.GetPiece(newloc.GetRow(), newloc.GetCol()) == 4)
          {
            System.out.println("test");
            start = newloc;
            start.Print();
          }
        }else
        {
          if(b.GetPiece(newloc.GetRow(), newloc.GetCol()) == 1 || b.GetPiece(newloc.GetRow(), newloc.GetCol()) == 3)
          {
            start = newloc;
          }
        }
      }
    }else
    {
      if(newloc.Equals(piece))
      {
        MakeMove();
      }
      if(IsBasicMove(newloc))
      {
        Move(newloc);
        MakeMove();
      }
      if(IsValidMove(newloc))
      {
        Move(newloc);
      }
    }
  }*/
  
  public void Click(Location newloc)
  {
    start = newloc;
    start.Print();
  }
  
  public static void main(String args[])
  {
    Checkers2 c = new Checkers2();
    c.FindJumpedPiece(new Location(2, 2), new Location(4, 4)).Print();// good
    c.FindJumpedPiece(new Location(2, 2), new Location(4, 0)).Print();// good
    c.FindJumpedPiece(new Location(2, 2), new Location(0, 0)).Print();// good
    c.FindJumpedPiece(new Location(2, 2), new Location(0, 4)).Print();// good
    c.FindJumpedPiece(new Location(1, 1), new Location(3, 3)).Print();// good
    System.out.println(c.IsStart());
  }
}





















